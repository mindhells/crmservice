directive @requireAuth(
  role: UserRole! = USER,
) on FIELD_DEFINITION

scalar Upload

type Query {
    customer(id: String!): Customer @requireAuth(role: USER)
    customers: [Customer!]! @requireAuth(role: USER)
    user(id: String!): User @requireAuth(role: ADMIN)
    users: [User!]! @requireAuth(role: ADMIN)
    login(email:String!, password:String!): String
}

type Mutation {
    addCustomer(input: CustomerInput!): Customer @requireAuth(role: USER)
    editCustomer(id: String!, input: CustomerInput!): Customer @requireAuth(role: USER)
    deleteCustomer(id: String!): Customer @requireAuth(role: USER)
    addUser(input: UserInput!): User @requireAuth(role: ADMIN)
    editUser(id: String!, input: UserInput!): User @requireAuth(role: ADMIN)
    deleteUser(id: String!): User @requireAuth(role: ADMIN)
}

input CustomerInput {
    name: String
    surname: String
    photo: Upload
}

type Customer {
    id: ID!
    name: String!
    surname: String!
    photo: File
    createdBy: User!
    updatedBy: User!
}

enum UserRole {
    USER,
    ADMIN
}

type User {
    id: ID!
    email: String!
    role: UserRole!
}

input UserInput {
    email: String
    password: String
    role: UserRole = USER
}

type File {
    filename: String
    mimetype: String
    data: String
}